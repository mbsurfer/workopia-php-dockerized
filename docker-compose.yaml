services:
  server:
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    ports:
      - '${APP_PORT:-8000}:80' # Example: use .env for APP_PORT, default to 8000
    volumes:
      - ./src:/var/www/html
      # pass in our own configuration by binding to the local path
      # set as read only with :ro, the container should not change the file
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
  php:
    build:
      context: ./dockerfiles
      dockerfile: php.dockerfile
    volumes:
      # :delegated helps with performance by batching data written back to the host machine
      - ./src:/var/www/html:delegated
    environment: # Pass DB connection details to PHP
      DB_HOST: db # Service name of the MySQL container
      DB_PORT: ${DB_PORT:-3306}
      DB_DATABASE: ${DB_DATABASE:-workopia}
      DB_USERNAME: ${DB_USERNAME:-workopia_user}
      DB_PASSWORD: ${DB_PASSWORD:-secret_password}
    depends_on:
      - db # Ensures 'db' service starts before 'php'

  db: # MySQL Service
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-supersecretroot} # Root password for MySQL
      MYSQL_DATABASE: ${DB_DATABASE:-workopia} # Database to be created on startup
      MYSQL_USER: ${DB_USERNAME:-workopia_user} # User to be created
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret_password} # Password for the user
    ports:
      # Expose MySQL port to host (e.g., for GUI tools)
      # Format: HOST_PORT:CONTAINER_PORT
      - "${FORWARD_DB_PORT:-3307}:3306" # Example: access on host via port 3307
    volumes:
      - db_data:/var/lib/mysql # Persist database data

  composer:
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html

volumes:
  db_data: